-------------------------------- 식별자
'''
* 식별자 

1. 식별자는 사용자 정의로 데이터에 이름을 붙여놓은 것을 말합니다.
2. 모듈, 패키지, 변수, 함수, 클래스 등의 이름을 식별자라고 합니다.
3. 식별자 이름은 중복해서 지정할 수 없습니다.

'''

name = "홍길동"

name2 = "김철수"

print(name)

print(name2)

# 식별자 이름을 숫자로 지정하거나 숫자로 시작하면 안된다. EX) 7 = 777, 7number = 777 (x)

number7 = 7

num7ber = 7

# 식별자 이름에 공백을 포함할 수 없습니다. EX) my birth day = 19991007 (x)

mybirthday = 1007

my_birth_day = 41231124

# 대/소문자를 다르게 쓰면 서로 다른 식별자로 인식한다.

banana = '바나나'
Banana = '빠나나'
BaNaNa = '버네이너'

print(banana)
print(BaNaNa)
print(BaNaNa)

# if, while ,for오 같은 이미 기능이 내포되어 있는 키워드(예약어)는 식별자 이름으로 사용할 수 없습니다.
# EX) if = "만약에" (x) , IF = "만약에" (o)


# print() 와 같은 내장함수의 이름도 식별자 이름으로 사용할 수는 있지만, 함수의 기능을 잃는다.

# 한글 ,한자 등 영어 이외의 문자도 식별자 이름으로 사용이 가능하지만 권장하지 않는다.

야옹이 = "고양이"
明 = "하하하"

print(야옹이)


------------------------------- print()함수

'''
* 표준 출력 함수 print()

- 파이썬의 표준 출력함수 print는 괄호 안에 출력하고 싶은 변수, 리터럴 상수, 수식 등을 적으면 터미널에 텍스트 출력을 실행한다.


'''
value = 1234
name = ' 홍길동 '

print(value)
print(name)
print(value * 3)
'''
 - 출력할 데이터가 여러개라면 괄호 안에 콤마로 나열하여 작성한다.

'''
dog = '멍멍이'

cat = '야옹이'

print(dog,cat,"좋아요 ")

'''

- print함수 내부에는 sep(separator의 약자로 구분자)이라는 속성이 존재한다.

- sep 속성의 기본값은 " "(공백)이 지정되어 있고, 변경하려면 직접작성하여 변경한다.

'''

print("--------------------------------")

print(dog, cat, "좋아요", sep = "")
print(dog, cat, "좋아요", sep = ", ")
print(dog, cat, "좋아요", sep = "★ ")


print("--------------------------------")
''' 
- end 속성은 데이터 출력 이후 맨 끝에 포함할 문자를 지정하는 용도입니다.

- 파이썬의 print 함수 내부에 end라는 속성값이 지정되어 있고, 기본값으로 /n이 지정되어있다.


'''
print(dog, cat, end = " ")
print(dog, cat, end = "\n")
print(dog, cat, end= '키우고 싶다' ,sep = "와")

---------------------------- 자료형



# 변수의 자료형을 확인하는 함수 : type()


'''
* 정수형 
- 정수형(int)은 양수, 음수의 정수값을 표현하며 소수점은 표현할 수 없고, 
    무수히 많은 정수를 저장할 수 있다. 

'''

num = 1234


print(type(num))

num2 = -43221

print(type(num2))

# 2진수, 8진수, 16진수도 저장이 가능하다.

# 2진수(binary) 저장 시에는 리터럴 정수 앞에 접두어 0b를 붙힌다. 
# 8진수(octal) 저장 시에는 리터럴 정수 앞에 접두어 0o를 붙힌다. 
# 16진수(hexadecimal) 저장 시에는 리터럴 정수 앞에 접두어 0x를 붙힌다. 

a = 0b1011
b = 0o77
c = 0xAC00 # 16^3*10 + 16^2*12

print(a, b, c)

print('-----------------------------')

# 진법 변환시

print(bin(33)) # 10진수 > 2진수

print(oct(0b11101)) # 2진수 > 8진수

print(hex(0o654)) # 8진수 > 16진수

'''
* 실수형

- 실수형 자료에는 10진수형 소수점 표현방식과 지수형 표현방식을 사용한 실수값을 저장할 수 있습니다.

'''

a = 85.432
print(type(a))

b = 100.0
print(type(b))

c = 9.832e13           # 9.832 * 10^13
print(c)

d = 3.141592e-3         # 3.141592 * 10^-3
print(d)


''' 
* 복소수형 (complex)

- 복소수는 제곱해서 음수가 되는 가상의 수입니다.
- 허수를 나타내는 접미사는 j를 사용합니다.

'''

e = 1+2j

print(type(e))
'''
* 논리형 (boolean)
- 명제가 참일 경우 True, 거짓일 경우 False값을 가진다. (반드시 대문자로 시작)

'''


t = True
f = False
t1 = "True"

print(type(t), type(t1))

-------------------------------- 비교연산자, 문자열, 탈출 문자

'''
* 비교 연산자 (<, <=, >, >=, ==, !=)

- 좌항과 우항의 비교하여 논리값을 도출하는 연산자.


'''

a = 5

print(a < 5)
print(a < 10)
print(a != 5)

print("---------------------")

# 문자열도 동등비교를 할 수 있다. (대/소문자 구별)

password = "abc1234!"

print(password == "Abc1234")

print("---------------------")

# 문자열끼리 대 / 소 비교가능 EX) A < B , a < b
# 소문자, 대문자, 한글별로 사전 등재 순서 규칙이 적용됨.
# 종류별 기준은 대문자 < 소문자 < 한글

print("apple"< "grape") 
print("감자" > "양파")
print("peach" < "Zebra")
print("가위" < "zoo")

print(ord("a"))
print(ord("A"))
print(ord("4"))

print("--------------------")
'''

* 문자열 

- 문자열은 문자들을 따옴표 로 감싸서 나열한 데이터의 형태.
- 어떤 형태의 데이터가 들어가도 모두 문자열로 인식하고, 저장길이에 제한이 없다.

'''

s1 = "안녕하세요!"

print(type(s1))

# 나는 그에게 "도와줘!" 라고 말했다. 

s3 = '나는 그에게 "도와줘" 라고 말했다.'

print(s3)

# Let's go!

s4  = "Let's go"

print(s4)

# Let's go "Together"
# ""로 구성된 문자열 내부에서 \"를 붙여 출력한다.

s5 = "Let's go\"Together\""
print(s5)

s6 = 'Let\'s go"Together"'
print(s6)

print("--------------------")

''' 
* 탈출 문자
1. \n : 줄 개행을 실행.
2. \t : 탭 명령을 실행.
3. \r : 캐리지 리턴 (커서를 맨 앞으로 되돌림)
4. \\ : 특수문자 \를 표현
5. \' : 특수문자 '를 표현
6. \" : 특수문자 "를 표현

'''

s7 = "안녕~~!\t\t잘가~~!"
print(s7)

s8 = "안녕~~!\n\n잘가 ~~!"
print(s8)

file1 = "C:\\temp\\new.jpg"
print(file1)

# 문자열 앞에 r을 붙히면 탈출 문자를 적용시키지 않는다.
file2 = r"C:\temp\new.jpg"

print(file2)

