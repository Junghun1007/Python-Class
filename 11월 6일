-------------------------------- quiz (1)
import random as r

prize1 = 0
prize2 = 0
prize3 = 0
prize4 = 0
prize5 = 0
fail_cnt = 0

# 로또 번호를 생성하는 함수

def create_lotto():
    lotto_nums = list(range(1,46))
    lotto = r.sample(lotto_nums , 6)
    lotto.sort()
    return lotto

# 보너스 번호를 생성하는 함수

def create_bonus_num(win):
    while True:
        num = r.randint(1,45)
        if num not in win:
            bonus_num = num
            break
    return bonus_num

# 등수를 체크할 함수

def check_lotto_num(my_lotto, win, bonus_num):
    cnt = 0
    for n in my_lotto:
        if n in win:
            cnt += 1
    if cnt == 6:
        global prize1
        prize1 += 1
    elif cnt == 5:
        if bonus_num in my_lotto:
            global prize2
            prize2 += 1
        else:
            global prize3
            prize3 += 1
    elif cnt == 4:
        global prize4
        prize4 += 1
    elif cnt == 3:
        global prize5
        prize5 += 1
    else:
        global fail_cnt
        fail_cnt += 1

# 당첨번호 생성

win = creat_lotto()
bonus_num = create_bonus_num(win)
paper = 0 # 로또 몇장 구매했는지를 저장할 변수.

while True:
    my_lotto = create_lotto()
    paper += 1
    check_lotto_num(my_lotto,win,bonus_num)
    if prize1 == 1:
        print("1등에 %d번만에 당첨되셨습니다.! " % paper)
        print("1등에 1번에 당첨될 동안 누적 당첨 현황")
        print("# 2등 : %d회" % prize2)
        print("# 3등 : %d회" % prize3)
        print("# 4등 : %d회" % prize4)
        print("# 5등 : %d회" % prize5)
        print("# 꽝  : %d회" % fail_cnt)
        print("당첨까지 사용된 금액은 : %d원" % (paper * 1000))
        break
    else:
        print("로또 %d장째 구매중..." % paper)
--------------------------------- quiz (2)
'''
& UP & DOWN 게임

1. 1~100 사이의 정수 난수를 발생시켜서 해당값을 사용자가 맞추게 하는게임입니다.

2. 사용자가 입력한 값이 정답값보다 큰지 작은지 사용자에게 알려줘서, 사용자가 지속해서  
    범위를 좁혀가며 답을 찾을 수 있게 합니다.

3. 정답을 맞췄을 때 프로그램이 종료되도록 구성해 보세요.

4. 사용자가 정답을 맞췄을  때 몇 번 만에 정답을 맞추었는지 출력하세요.

'''
import random as r

def create_num():
    num = r.randint(1,100)
    return num

def check_num(num):
    cnt = 5
    while True:
        answer = int(input("숫자를 입력하세요 : "))
        if num > answer:
            cnt -= 1
            print("UP!!")
            print("정답 기회 %d 번남음" % cnt)   
        elif num < answer:
            cnt -= 1
            print("DOWN!!")
            print("정답 기회 %d 번남음" % cnt)
        else:
            print("정답입니다.")
            print("%d번만에 맞추셨어요!." % (6-cnt))
            break
a = create_num()
check_num(a)
------------------------------------------ 예외처리

'''

 * 예외 처리

 - 프로그램은 실행 중에 사용자와 끊임없는 상호 작용을 합니다.
    (입력, 출력 | 선언, 호출 | 요청, 응답...)
 - 프로그램의 사용자는 예측불가의 행동을 할 수 있으며 잘못된 사용으로 인해
    에러를 유발할 수도 있습니다.
 - 에러의 종류 : 심각한 에러(Serious Error), 덜 심각한 에러(Mild Error)
 - 심각한 에러(Serious Error)는 개발자가 해결할 수 없는 에러 (천재지변, 시스템 상 문제)
 - 덜 심각한 에러는 문법 오류나 오타 등 해결이 가능한 에러들을 말하며 
    이를 예외(Exception)라고 칭합니다.
 - 아무리 프로그램을 정교하게 구성해도 예외 발생 시 프로그램의 비정상 종료를 막을 수 없기 때문에 
    예외처리 문법을 통해서 '프로그램의 비정상 종료'를 막아야 합니다.

'''
--------------------------------- ex
try:
    n1 = int(input("정수 1 : "))
    n2 = int(input("정수 2 : "))
    print("입력한 정수 : %d, %d" % (n1, n2))
    result = n1 / n2
    print("%d / %d = %d" %(n1, n2, result))
except:
    print("0을 입력하지 마세요!!!")

print("프로그램 정상 종료")


# 다중 예외 처리

 - 하나의 try 블록에서 여러 상황의 예외를 예외별로 다르게 처리하고 싶다면
    다중 예외 처리를 사용합니다.

 - 다중 예외 처리를 할 때는 except 뒤에 발생하는 예외의 이름을 적어줍니다.

 - 자주발생하는 예외의 이름 
    1. NameError : 정의되지 않은 변수나 함수, 클래스를 사용할 때 발생합니다.
        ex) print(apple)
    2. ValueError : 주로 형 변환시 발생하며, 내부 값의 형태가
        잘못되었을 때 발생합니다.
        ex) int("3.14")
    3. ZeroDivisionError : 숫자를 0으로 나누었을 때 발생합니다.
    4. IndexError, KeyError : 존재하지 않는 인덱스나 키를 사용하여 시퀀스, 딕셔너리를 조회 했을 때 발생합니다.
        ex) s = "hello"
            print(s[6])
            d ={}
            print(d['멍멍이'])
    5. TypeError : 연산수행 시 피연산자의 데이터 타입이 올바르지 않을 경우 발생합니다.
        ex) print(10 ** "메롱")

      try:
          s = input("정수 : ")
          point = int(s) # ValueError
          print(150 / point) # ZeroDivisionError
          print(s[2]) # IndexErro
      except ValueError:
          print("정수로만 입력하세요 ! ")
      except ZeroDivisionError:
          print("0으로 나눌 수 없습니다. ! ")
      except IndexError:
          print("인덱스 범위를 벗어났습니다. ! ")

  * finally 키워드는 예외 발생여부와 상관없이 무조건 실행해야되는 처리방식입니다.
  ------------------------ ex
    pets = ['거북이', '강아지', '고양이']

    for x in range(4):
        try:
            print(pets[x], "키우고싶다~")
        except:
            print("애완동물의 정보가 없습니다.")
        finally:
            print("아무튼 출력되는 문장입니다.")
            
'''
 * 예외 일부러 발생시키기
 - 프로그래밍을 진행하다 보면 일부러 예외를 발생시켜서 
    코드의 흐름을 전환해야 하는 경우가 발생합니다.
 - 파이썬은 raise라는 명령어를 사용해 오류를 강제로 발생가능.

'''

    def calc_sum(end):
        if end<=0:
            raise ValueError
        total = 0
        for n in range(1, end+1):
            total+= n 
        return total
    try:
        result = calc_sum(100)
        print(result)

        result2 = calc_sum(-120) # 실행안됨(오류x)
        print(result2)
    except:
        print("매개값은 양수로 주세요!")
        
        
------------------------------- 파일 입출력

'''
 * 파일 입/출력
    - 프로그램이 생성한 정보를 좀 더 오래 저장할 때는 파일에 기억해야 합니다.
    - 메모리는 속도는 빠르지만 전원이 끊어지면 정보를 잃어버릴 수 있기
        때문에 하드디스크에 저장해야 데이터를 보관할 수 있습니다.
    - 파이썬에서는 파일 입/출력을 할 때 open() 함수를 사용합니다.
        ex) open(파일 경로, 모드)
    - 파일 경로는 입/출력 대상의 파일 경로입니다. (디렉터리 경로 포함)
    - 모드는 읽기, 쓰기, 추가 등 무엇을 할 지 결정하는 인수입니다.
    - 모드의 종류
        1. r : 파일을 읽어들입니다. 파일이없으면 예외가 발생
        2. w : 파일의 데이터를 저장합니다. 파일이 중복되면 덮어씁니다.
        3. a : 파일의 데이터를 추가합니다.
        4. 
'''


# 파일 저장 기능(write, append)

    file_path = "C:/Users/gusan/IoTest/test2.txt"


    try:
        # 파일 입출력을 실행하는 내장함수 open()
        # 첫번째 인수로 파일 경로를, 두번째 인수로 모드를 설정.
        f = open(file_path, "a")
        text = "기존의 파일에 이어서 작성할 때 사용합니다."

        # 파일을 저장할 때는 f.write()메소드를 사용합니다.
        # 저장할 데이터를 인수로 전달합니다.
        f.write(text)
        print("파일 저장 완료!")
    except:
        print("파일 저장 실패!")
    finally:
        # 파일 입출력은 하드디스크 자원을 사용해야 하는 코드이므로 반드시 자원을 해제 해야함.
        f.close()















