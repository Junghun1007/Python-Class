------------------------- 문자열 메소드



* 문자열 공백 제거 메서드

1. lstrip() : 문자열의 왼쪽 공백만 제거
2. rstrip() : 문자열의 오른쪽 공백만 제거
3. strip() : 문자열의 양쪽 공백만 제거

ex)
  print(user_id + "님 안녕하세요 .")
  print(user_id.lstrip() + "님 안녕하세요 .")
  print(user_id.rstrip() + "님 안녕하세요 .")
  print(user_id.strip() + "님 안녕하세요 .")

user_id = input("아이디 : ").strip()


* 문자열 알파벳 형태 변경 메소드

1. lower() : 영문 알파벳을 모두 소문자로 변환
2. upper() : 영문 알파벳을 모두 대문자로 변환
3. swapcase() : 영문 대소문자를 각각 반전
4. capitalize() : 문장의 맨 첫글자만 대문자로, 나머지는 소문자로 변환
5. title() : 각 단어의 맨 첫글자만 대문자로, 나머지는 소문자로 변환

ex) 
    s = "SElf MaDeoRanGe GOodTime"

    print(s)
    print(s.lower())
    print(s.upper())
    print(s.swapcase() )
    print(s.capitalize())
    print(s.title())

****** 중요 ******

 * 문자열 분할
  - split() 메소드는 구분자를 기준으로 문자열을 분할해 리스트에
    담아 '반환'한다.
ex)
    s3 = "홍길동 | 대한출판사 | 2020년 10월"

    data = s3.split(" | ",2)
    print(data[0])
    print(data[1])
    print(data[2])

---------------------------- 리스트

* 리스트 (list)

  - 여러 개의 값을 집합적으로 저장하기 위해 사용하는
    파이썬 자료형입니다.
  - 다른 언어의 배열과 유사한 개념이며, 실제로 배열과
    유사한 방식으로 데이터가 관리된다.
  - [] 대괄호 안에 요소를 콤마로 구분하여 나열한다.
  - 저장 갯수에 제한이 없다.
ex)
    x = ["a","b", 10 ,"c","d"]
    print(type(x))
    for c in x:
        print(type(c))

ex) 
    points = [88,96,70,100,90,100]
    sum = 0
    for a in points:
        sum += a
    print("총점 : %d, 평균 : %.2f" % (sum, sum/len(points)))
    # len() : 개수
* 리스트의 내부 요소 다루기

  - 리스트를 다룰 때는 문자열과 비슷한 방식을 사용합니다.


# 리스트 인덱싱

  pokemon = ['피카츄','라이츄','파이리', '꼬부기','버터풀']

  print(type(pokemon))
  print(pokemon[2])
  print(pokemon[1][2]) # [라이츄][츄]
  print(pokemon[4][:2])


# 리스트 슬라이싱

  nums = [0,1,2,3,4,5,6,7,8,9]

  print(nums[2:5:1])
  print(nums[:4])
  print(nums[1:7:2])

# 리스트는 인덱싱을 사용하여 변수처럼 내부의 값을 변경할 수 있습니다.

  print(nums)
  nums[2] = 34
  print(nums)
  nums[3] = nums[6]
  print(nums)


# unpackaging : 리스트 내부 요소를 다시 변수에 저장.
# - 좌항의 변수 개수와 우항의 리스트 요소개수가 같으면 각각 저장됨

  pokemon = ['피카츄','라이츄','파이리', '꼬부기','버터풀']

  p, r ,c ,s ,b = pokemon 
  print(p, r ,c ,s ,b)

# 문자열을 직접 변경할 수 없다
  s = "python"
  print(s.replace("y","x"))  # s[2] = "x" (x)

# 리스트의 +, * 연산 가능

  list1 = [1,2,3,4,5]
  list2 = [10,11]
  list3 = list1 + list2

  print(list1+list2)
  print(list3)
  print(list2 * 3)

# 비어있는 리스트 만들기

  list1 = []
  print(list1)

  list2 = list()
  print(list2)

----------------------- quiz (1)

# 빈 리스트 생성.
# 사용자가 그만 입력하고 싶을때까지 음식이름을 받은후 종료되면 모두 출력

food = []

while True:
    a = input("음식을 입력하세요 : ")
    food.append(a)
    if a == '종료':
        break    
print(food)

--------------------------------

 # 리스트 내부 요소 삭제
 
    1. remove() : 삭제할 값을 직접 지정하여 삭제
    2. del() : 삭제할 요소의 인덱스를 통해 삭제
    3. clear() : 리스트 내부 전체 요소 삭제
    
    ex)
    points = [88,99,56,92,100,78]

    print(points)

    points.remove(92)
    print(points)

    del(points[0])
    print(points)

    del points[2]
    print(points)

    points.clear()
    print(points)


---------------------- quiz (2)

    - 삭제할 이름을 입력받아서 그에 해당하는 이름을 삭제후 
        " 삭제 후 정보 : ~~" 출력
    - remove() 와 del()을 각각 사용하여 출력해 보세요.


pokemon = ['피카츄','라이츄','파이리', '꼬부기','버터풀']

 ------- remove() 사용 시
 
  remove = input("삭제할 포켓몬 이름 입력 : ")
  pokemon.remove(remove)

  print("삭제 후 정보 : ", pokemon)


 -------- del() 사용 시
 
  d = input("삭제할 포켓몬 이름 입력 : ")

  index = 0
  while d != pokemon[index]:
       index+=1
  del(pokemon[index])

  print("삭제 후 정보 : ", pokemon)

-----------------------------

 * 리스트의 탐색과 정렬
 
 1. index() : 리스트에서 특정 값이 저장된 인덱스를 반환
 2. count() : 리스트 내부에 저장된 특정 요소의 개수를 반환
 3. sort() : 리스트를 오름차 정렬
 4. reverse() : 리스트 데이터를 역순으로 배치
 
 ex)
 
    points = [99, 14, 87, 100, 55, 100, 99, 100, 22]
    
    idx = points.index(87)
    print("87점을 획득한 학생은 %d번째 입니다" % (idx+1))
    
    perfect = points.count(100)
    print("만점자의 수는 %d명 입니다. " % perfect)

   
# 내장함수 len(), max(), min()

 ex)
    print("학생 수는 %d명 입니다." % len(points))
    print("최고 점수는 %d점 입니다." % max(points))
    print("최저 점수는 %d점 입니다." % min(points))

 # 오름차 정렬 sort()

  points = [99, 14, 87, 100, 55, 100, 99, 100, 22]

  print(points)

  points.sort()
  print(points)

  points.reverse()
  print(points)

 # 내림차 정렬 sort(reverse= True)
 
  nums = [144, 32 , 33, 99, 22, 100,2]
  nums.sort(reverse= True)
  print(nums)

 # 리스트 내의 요소 존재여부를 검사하려면 in 키워드를 사용한다.

  food_menu = ["김밥", "단무지", "닭강정", "김말이"]

  name = input("음식명을 입력하세요 : ")

  if name in food_menu:
      print("%s이(가) 주문되었습니다. " % name)
  else:
      print("%s는(은) 없는 음식입니다." % name)
























