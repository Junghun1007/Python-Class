'''
 * 문자열 인덱싱
  - 파이썬은 문자열을 기본 타입으로 지정할 뿐만아니라 문자열을
  문자열을 관리하는 명령을 가지고 있다.
  - 문자열은 메모리상에 문자들이 일렬로 저장되는 구조입니다.

'''

s = "python" # [p,y,t,h,o,n]


for n in s:
    print(n, end = "!")
print(s)
print(s[2])

----------------------------- quiz (1)

# 사용자가 입력한 주민등록번호로 남자인지 여자인지를 조건식을 사용해서 판별

n = input("주민등록번호를 입력하세요 : ") 

if n[6] == "1" or n[6] == "3":  # 문자열로 받기때문에 ""을 붙혀야함.
    print("남자입니다.")
else:
    print("여자입니다.")


s = "python"

print(s[2:5:1])
print(s[1:4]) # step 생략시 1로 출력
print(s[3:]) # end, step 생략시 begin부터 끝까지 출력
print(s[:4]) # begin, step 생략시 처음부터 end까지 출력
print(s[:]) # = print(s)


''' 
- 포맷팅은 문자열 사이사이에 다른 타입의 데이터를 넣어 문자열을 조립하는방식

 - 포맷팅에 사용하는 서식 문자
  ex) %d : 10진수의 정수
      %f : 실수
      %o : 8진수
      %x : 16진수
      %c : 문자
      %s : 문자열
      %% : % 입력
'''


---------------- 정수 포맷팅
apple = 3
print("사과가", apple, "개 있습니다.")
print("사과가 %d개 있습니다." % apple)

# 여러개의 포맷팅은 %뒤에 괄호로 묶는다.
month = 12
day = 24
anni = "크리스마스"
print("%s는 %d월 %d일 입니다."  % (anni, month,day) )

----------------- 실수 포맷팅
percent = 40
print("파이썬의 진도율은 %d%%입니다. " % percent)

----------------- 문자열 포맷팅

 * 문자열 포맷팅 폭 지정하기

  - 포맷팅 출력 방식을 사용하면 포맷문자열이 차지할 공간의 길이를 지정 가능
  - 폭 지정을 하면 정된된 형태로 출력할 수 있다.
  - 포맷팅 서식문자 자리에 양수값을 주면 해당 숫자만큼 자리를 차지하며 우측 정렬
     음수값을 주면 좌측 정렬

p = "파이썬 프로그래밍" 
print(p)
print("%10s" %p) # 파이썬 프로그래밍
print("%20s" %p) #           파이썬 프로그래밍 
print("%30s" %p) #                     파이썬 프로그래밍


a = 1234
print("~~~~%d~~~~" %a)     
print("~~~~%12d~~~~" %a)    #~~~~        1234~~~~
print("~~~~%-10d~~~~" %a)   #~~~~1234      ~~~~
print("~~~~%-15d~~~~" %a)   #~~~~1234           ~~~~


----------------------- quiz (2)

# 주민등록번호를 입력받고 앞,뒷자리 출력

ssn = input("주민등록번호를 입력하세요(-포함) : ")
ssn1 = int(ssn[:2])                                  # 년도 두자리
s = '여자'
month = ssn[2:4]                                     # 월
day = ssn[4:6]                                      # 일

if ssn[0] == '9':                               # 년도, 남,여 판별
    year = ssn1 + 1900                          
    if ssn[7] == '1':
        s = '남자'                               
else:
    year = ssn1 + 2000                          
    if ssn[7] == '3':
        s = '남자'                               
age = 2020 - year                                       # 나이

print("주민등록번호 앞자리 : " , ssn[:6])
print("주민등록번호 뒷자리 : " , ssn[7:])

print("%s년 %s월 %s일 %d세 %s" %(year, month, day, age, s))


------------------------------- 함수 

* 문자열 관리 함수, 메서드.
 - 함수 : 모듈 내부에서 공용적으로 사용할 수 있는 기능.(단독 호출)

- 메서드 : 클래스에 소속된 함수, 특정 자료형 전용 함수.
    (참조열 문자열을 . 앞에 붙임)
    
    
# 내장함수 len() : 순차형 자료의 내부 데이터 갯수를 구함.
    ex) 
    s = "python programming"

    count = 0
    for n in s:
        count+=1
    print(count)

    print(len(s))

    user_id = "abc1234"

    if len(user_id) < 7:
        print("id는 7글자 이상 작성해 주세요.")
    else:
        print("id가 정상적을 등록되었습니다. ")

            
# 문자열 메서드 find(), rfind(), index() : 문자열 내부의 특정문자를 검색하여 해당 인덱스를 알려줌

    - find는 앞에서부터, rfind는 뒤에서 부터 탐색하고 찾지 못했다면 -1 반환
    - index() : find()와 동일하지만 찾지못하면 에러발생

    ex)
    s = "python programming"

    print(s.find("o"))
    print(s.rfind("o"))         # 뒤에서부터 탐색
    print(s.find("program"))    # 해당 단어의 첫글자 인덱스 반환
    print(s.find("메롱"))       # -1 

    pw = "aaa1111"

    if pw.find("!") == -1:
        print("비밀번호에 !를 포함시켜주세요. ")
    else:
        print("정상입니다. ")

# 메서드 count() : 문자열 내부에 특정 단어의 빈도수를 반환
    ex)
    message = """ 생각이라는 생각은 생각하면 생각할수록 자꾸 생각이 나는 생각이기 때문에
    생각이라는 생각은 아예 생각하지 않는 생각이 가장 좋은 생각이라고 생각한다."""

    print(message.count("생각"))


# 특정문자의 포함 여부만 확인하려면 in 키워드를 사용.
    ex)
    
    s = "python programming"
    print("a" in s) # True
    print("q" in s) # False
    print("pro" in s)   # True
    print("z" not in s) # True    

# 사용자에게 데이터를 입력받을 때 입력값의 형태를 검사
    1. isdecimal() : 모든 문자가 숫자 형태인지를 검사
    2. isalpha() : 모든 문자가 영문 알파벳 인지를 검사
    3. islower() : 모든 문자가 영문 소문자 인지를 검사
    4. isupper() : 모든 문자가 영문 대문자 인지를 검사
    ex)
    
    print("15 + 8 = ???")

    while True:
        answer = input(" > ")
        if answer.isdecimal():
            answer = int(answer)
        else:
            print("정수를 입력해주세요.")
            continue
        if answer == 23:
            print("정답입니다. ")
            break
        else:
            print("틀렸습니다. ")

# 문자열 대체 메서드 replace() : 특정 단어를 모두 찾아 새로운 단어로 바꾸는 메서드
    ex)
   
    s1 = "파이썬 프로그래밍!!! 파이썬은 문자열을 관리하는\
    수많은 메서드를 제공합니다!!! 파이썬 짱짱!!!"
    print(s1)
    print(s1.replace("파이썬","python"))

    print(s1.replace("!",""))

    s2 = "아침부터 커피를 마셨는데 점심먹고 또 커피를 마셨어\
    ...그런데 저녁에 또 커피를 주면 오늘 커피를 몇 잔 마신거지?"

    print(s2.replace("커피","우유",2))










